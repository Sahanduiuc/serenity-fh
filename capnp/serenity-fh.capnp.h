// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: serenity-fh.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 8000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(f089edbd40dce488);
enum class Side_f089edbd40dce488: uint16_t {
  BUY,
  SELL,
};
CAPNP_DECLARE_ENUM(Side, f089edbd40dce488);
CAPNP_DECLARE_SCHEMA(d51b77a1a5dfcf6b);

}  // namespace schemas
}  // namespace capnp

namespace cloudwall {
namespace serenity {

typedef ::capnp::schemas::Side_f089edbd40dce488 Side;

struct TradeMessage {
  TradeMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d51b77a1a5dfcf6b, 4, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class TradeMessage::Reader {
public:
  typedef TradeMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int64_t getTradeId() const;

  inline  ::cloudwall::serenity::Side getSide() const;

  inline double getSize() const;

  inline double getPrice() const;

  inline bool hasTradedProductId() const;
  inline  ::capnp::Text::Reader getTradedProductId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TradeMessage::Builder {
public:
  typedef TradeMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int64_t getTradeId();
  inline void setTradeId( ::int64_t value);

  inline  ::cloudwall::serenity::Side getSide();
  inline void setSide( ::cloudwall::serenity::Side value);

  inline double getSize();
  inline void setSize(double value);

  inline double getPrice();
  inline void setPrice(double value);

  inline bool hasTradedProductId();
  inline  ::capnp::Text::Builder getTradedProductId();
  inline void setTradedProductId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTradedProductId(unsigned int size);
  inline void adoptTradedProductId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTradedProductId();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TradeMessage::Pipeline {
public:
  typedef TradeMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::int64_t TradeMessage::Reader::getTradeId() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t TradeMessage::Builder::getTradeId() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TradeMessage::Builder::setTradeId( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::cloudwall::serenity::Side TradeMessage::Reader::getSide() const {
  return _reader.getDataField< ::cloudwall::serenity::Side>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::cloudwall::serenity::Side TradeMessage::Builder::getSide() {
  return _builder.getDataField< ::cloudwall::serenity::Side>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void TradeMessage::Builder::setSide( ::cloudwall::serenity::Side value) {
  _builder.setDataField< ::cloudwall::serenity::Side>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline double TradeMessage::Reader::getSize() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double TradeMessage::Builder::getSize() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void TradeMessage::Builder::setSize(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double TradeMessage::Reader::getPrice() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline double TradeMessage::Builder::getPrice() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void TradeMessage::Builder::setPrice(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool TradeMessage::Reader::hasTradedProductId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool TradeMessage::Builder::hasTradedProductId() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TradeMessage::Reader::getTradedProductId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder TradeMessage::Builder::getTradedProductId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void TradeMessage::Builder::setTradedProductId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TradeMessage::Builder::initTradedProductId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void TradeMessage::Builder::adoptTradedProductId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TradeMessage::Builder::disownTradedProductId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

}  // namespace
}  // namespace

