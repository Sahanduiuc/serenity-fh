// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: serenity-fh.capnp

#include "serenity-fh.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<25> b_f089edbd40dce488 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    136, 228, 220,  64, 189, 237, 137, 240,
     18,   0,   0,   0,   2,   0,   0,   0,
    233,  84, 129, 118,   3, 122, 232, 143,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 186,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,  55,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 101, 114, 101, 110, 105, 116, 121,
     45, 102, 104,  46,  99,  97, 112, 110,
    112,  58,  83, 105, 100, 101,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 117, 121,   0,   0,   0,   0,   0,
    115, 101, 108, 108,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f089edbd40dce488 = b_f089edbd40dce488.words;
#if !CAPNP_LITE
static const uint16_t m_f089edbd40dce488[] = {0, 1};
const ::capnp::_::RawSchema s_f089edbd40dce488 = {
  0xf089edbd40dce488, b_f089edbd40dce488.words, 25, nullptr, m_f089edbd40dce488,
  0, 2, nullptr, nullptr, nullptr, { &s_f089edbd40dce488, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
CAPNP_DEFINE_ENUM(Side_f089edbd40dce488, f089edbd40dce488);
static const ::capnp::_::AlignedData<78> b_d51b77a1a5dfcf6b = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    107, 207, 223, 165, 161, 119,  27, 213,
     18,   0,   0,   0,   1,   0,   4,   0,
    233,  84, 129, 118,   3, 122, 232, 143,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 250,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 101, 114, 101, 110, 105, 116, 121,
     45, 102, 104,  46,  99,  97, 112, 110,
    112,  58,  84, 114,  97, 100, 101,  77,
    101, 115, 115,  97, 103, 101,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     92,   0,   0,   0,   3,   0,   1,   0,
    104,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   4,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   0,   0,   0,   3,   0,   1,   0,
    108,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,   0,   0,   0,   3,   0,   1,   0,
    112,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,   0,   0,   0,   3,   0,   1,   0,
    116,   0,   0,   0,   2,   0,   1,   0,
    116, 114,  97, 100, 101,  73, 100,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 105, 100, 101,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
    136, 228, 220,  64, 189, 237, 137, 240,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 105, 122, 101,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 114, 105,  99, 101,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d51b77a1a5dfcf6b = b_d51b77a1a5dfcf6b.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d51b77a1a5dfcf6b[] = {
  &s_f089edbd40dce488,
};
static const uint16_t m_d51b77a1a5dfcf6b[] = {3, 1, 2, 0};
static const uint16_t i_d51b77a1a5dfcf6b[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_d51b77a1a5dfcf6b = {
  0xd51b77a1a5dfcf6b, b_d51b77a1a5dfcf6b.words, 78, d_d51b77a1a5dfcf6b, m_d51b77a1a5dfcf6b,
  1, 4, i_d51b77a1a5dfcf6b, nullptr, nullptr, { &s_d51b77a1a5dfcf6b, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================

namespace cloudwall {
namespace serenity {

// TradeMessage
constexpr uint16_t TradeMessage::_capnpPrivate::dataWordSize;
constexpr uint16_t TradeMessage::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind TradeMessage::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* TradeMessage::_capnpPrivate::schema;
#endif  // !CAPNP_LITE


}  // namespace
}  // namespace

